buildscript {
	ext {
		springBootVersion = '2.1.0.BUILD-SNAPSHOT'
        junitJupiterVersion = '5.2.0'
		testSetsVersion = '1.5.0'
        karateVersion = '0.7.0'
        checkstyleVersion = '8.10'
        dockerPluginVersion = '0.19.2'
        wiremockVersion = '2.18.0'
	}
	repositories {
		jcenter()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:$testSetsVersion"
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:$dockerPluginVersion"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'com.palantir.docker'

group = 'pl.michalperlak'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

bootJar {
    baseName = 'repositories-app'
    version =  '0.1.0'
}

testSets {
    integrationTest { dirName = 'integration-test' }
    endToEndTest { dirName = 'e2e-test' }
}

docker {
    dependsOn build
    name "${project.group}/${bootJar.baseName}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

check.dependsOn integrationTest
check.dependsOn endToEndTest
integrationTest.mustRunAfter test
endToEndTest.mustRunAfter integrationTest

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/tests.exec")
        classDumpDir = file("$buildDir/jacoco/classdumps")
    }

    afterSuite { desc, result -> printTestsSummary(desc, result) }
}

integrationTest {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/tests.exec")
        classDumpDir = file("$buildDir/jacoco/classdumps")
    }

    afterSuite { desc, result -> printTestsSummary(desc, result) }
}

endToEndTest {
    useJUnit()
    testLogging {
        showStandardStreams = true
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/tests.exec")
        classDumpDir = file("$buildDir/jacoco/classdumps")
    }

    afterSuite { desc, result -> printTestsSummary(desc, result) }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok"

    compile "org.springframework.boot:spring-boot-starter-webflux"
    compileOnly "org.projectlombok:lombok"

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "io.projectreactor:reactor-test"
    testCompile "com.github.tomakehurst:wiremock-standalone:$wiremockVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"

    endToEndTestCompile "com.intuit.karate:karate-junit4:$karateVersion"
    endToEndTestCompile "com.intuit.karate:karate-apache:$karateVersion"

    checkstyle "com.puppycrawl.tools:checkstyle:$checkstyleVersion"
}

checkstyle {
    ignoreFailures = true
}

checkstyleMain {
    source = sourceSets.main.allSource
}

findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

def printTestsSummary(desc, result) {
    if (!desc.parent) {
        println "\nTest result: ${result.resultType}"
        println "Test summary: ${result.testCount} tests, " +
                "${result.successfulTestCount} succeeded, " +
                "${result.failedTestCount} failed, " +
                "${result.skippedTestCount} skipped"
    }
}